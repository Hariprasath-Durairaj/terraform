trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  workingDirectory: 'dhdp-env/QA'
  serviceConnection: 'dhdp-infra-sc'

  backendResourceGroup: 'dhdp-lab-resource-group'
  backendStorageAccount: 'dhdplabsa'
  backendContainerName: 'tfstate'
  backendKey: 'qa.terraform.tfstate'

stages:
  - stage: Init
    displayName: 'Terraform Init'
    jobs:
      - job: Init
        displayName: 'Init Job'
        steps:
          - checkout: self
            persistCredentials: true

        
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(workingDirectory)'
              backendServiceArm: '$(serviceConnection)'
              backendAzureRmResourceGroupName: '$(backendResourceGroup)'
              backendAzureRmStorageAccountName: '$(backendStorageAccount)'
              backendAzureRmContainerName: '$(backendContainerName)'
              backendAzureRmKey: '$(backendKey)'
              backendAzureRmUseOIDC: true

  - stage: Validate
    displayName: 'Terraform Validate'
    dependsOn: Init
    jobs:
      - job: Validate
        displayName: 'Validate Job'
        steps:
          - checkout: self
            persistCredentials: true

       

          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init (Validate)'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(workingDirectory)'
              backendServiceArm: '$(serviceConnection)'
              backendAzureRmResourceGroupName: '$(backendResourceGroup)'
              backendAzureRmStorageAccountName: '$(backendStorageAccount)'
              backendAzureRmContainerName: '$(backendContainerName)'
              backendAzureRmKey: '$(backendKey)'
              backendAzureRmUseOIDC: true

          - task: TerraformTaskV4@4
            displayName: 'Terraform Validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(workingDirectory)'
              environmentServiceNameAzureRM: '$(serviceConnection)'

  - stage: Plan
    displayName: 'Terraform Plan'
    dependsOn: Validate
    jobs:
      - job: Plan
        displayName: 'Plan Job'
        steps:
          - checkout: self
            persistCredentials: true

       

          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init (Plan)'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(workingDirectory)'
              backendServiceArm: '$(serviceConnection)'
              backendAzureRmResourceGroupName: '$(backendResourceGroup)'
              backendAzureRmStorageAccountName: '$(backendStorageAccount)'
              backendAzureRmContainerName: '$(backendContainerName)'
              backendAzureRmKey: '$(backendKey)'
              backendAzureRmUseOIDC: true

          - task: TerraformTaskV4@4
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(workingDirectory)'
              environmentServiceNameAzureRM: '$(serviceConnection)'
              publishPlanResults: true
              planOutput: 'tfplan.out'
              varsFile: 'qa.tfvars' 

           

  - stage: Apply
    displayName: 'Terraform Apply'
    dependsOn: Plan
    jobs:
      - job: PreApplyApproval
        displayName: '⏸ Await Apply Approval'
        pool: server
        steps:
          - task: ManualValidation@0
            displayName: 'Approve Apply to QA?'
            inputs:
              instructions: 'Please review the plan and approve deployment to QA.'
              onTimeout: 'reject'
              timeout: '1.00:00:00'

      - job: Apply
        displayName: 'Apply Job'
        dependsOn: PreApplyApproval
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            persistCredentials: true

          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: '$(serviceConnection)'
              backendAzureRmResourceGroupName: '$(backendResourceGroup)'
              backendAzureRmStorageAccountName: '$(backendStorageAccount)'
              backendAzureRmContainerName: '$(backendContainerName)'
              backendAzureRmKey: '$(backendKey)'
              backendAzureRmUseOIDC: true
              workingDirectory: '$(workingDirectory)'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(workingDirectory)'
              environmentServiceNameAzureRM: '$(serviceConnection)'
              planInput: 'tfplan.out'
              autoApprove: true












        
  - stage: Destroy
    displayName: 'Terraform Destroy'
    dependsOn: Apply
    condition: and(succeeded(), eq( variables['Build.SourceBranch'], 'refs/heads/main' ))
    jobs:
      - job: PreDestroyApproval
        displayName: '⏸ Await Destroy Approval'
        pool: server
        steps:
          - task: ManualValidation@0
            displayName: 'Approve Destroy of QA resources?'
            inputs:
              instructions: 'Confirm you want to tear down QA infra.'
              onTimeout: 'reject'
              timeout: '1.00:00:00'

      - job: Destroy
        displayName: 'Destroy Job'
        dependsOn: PreDestroyApproval
        steps:
          - checkout: self
            persistCredentials: true

          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Destroy'
            inputs:
              provider: 'azurerm'
              command: 'destroy'
              workingDirectory: '$(workingDirectory)'
              environmentServiceNameAzureRM: '$(serviceConnection)'
              autoApprove: true
